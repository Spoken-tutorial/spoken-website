# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('creation', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicCenter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('academic_code', models.CharField(unique=True, max_length=100)),
                ('institution_name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('pincode', models.PositiveIntegerField()),
                ('resource_center', models.BooleanField()),
                ('rating', models.PositiveSmallIntegerField()),
                ('contact_person', models.TextField()),
                ('remarks', models.TextField()),
                ('status', models.BooleanField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Academic Center',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('test', models.BooleanField(default=False)),
                ('category', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('foss',),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(max_length=3)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventsNotification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('role', models.PositiveSmallIntegerField(default=0)),
                ('category', models.PositiveSmallIntegerField(default=0)),
                ('categoryid', models.PositiveIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('message', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FossMdlCourses',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mdlcourse_id', models.PositiveIntegerField()),
                ('mdlquiz_id', models.PositiveIntegerField()),
                ('foss', models.ForeignKey(to='creation.FossCategory')),
            ],
        ),
        migrations.CreateModel(
            name='InstituteCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Institute Categorie',
            },
        ),
        migrations.CreateModel(
            name='InstituteType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Invigilator',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('appoved_by', models.ForeignKey(related_name='invigilator_approved_by', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LabCourse',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('pincode', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(to='events.District')),
            ],
        ),
        migrations.CreateModel(
            name='Organiser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(blank=True, to='events.AcademicCenter', null=True)),
                ('appoved_by', models.ForeignKey(related_name='organiser_approved_by', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('user', models.OneToOneField(related_name='organiser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganiserNotification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(related_name='permission_assigned_by', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(related_name='permission_district', to='events.District', null=True)),
                ('institute', models.ForeignKey(related_name='permission_district', to='events.AcademicCenter', null=True)),
                ('institute_type', models.ForeignKey(related_name='permission_institution_type', to='events.InstituteType', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PermissionType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourcePerson',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assigned_by', models.PositiveIntegerField()),
                ('status', models.BooleanField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Resource Person',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50)),
                ('even', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SingleTraining',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('training_type', models.PositiveIntegerField(default=0)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField()),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField()),
                ('updated', models.DateTimeField()),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('course', models.ForeignKey(to='events.CourseMap')),
                ('language', models.ForeignKey(to='creation.Language')),
                ('organiser', models.ForeignKey(to='events.Organiser')),
            ],
        ),
        migrations.CreateModel(
            name='SingleTrainingAttendance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('firstname', models.CharField(max_length=100, null=True)),
                ('lastname', models.CharField(max_length=100, null=True)),
                ('gender', models.CharField(max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField()),
                ('updated', models.DateTimeField()),
                ('training', models.ForeignKey(to='events.SingleTraining')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(max_length=3)),
                ('name', models.CharField(max_length=50)),
                ('slug', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(null=True, max_digits=10, decimal_places=4, blank=True)),
                ('longtitude', models.DecimalField(null=True, max_digits=10, decimal_places=4, blank=True)),
                ('img_map_area', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('users', models.ManyToManyField(related_name='resource_person', through='events.ResourcePerson', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('gender', models.CharField(max_length=15)),
                ('verified', models.BooleanField(default=False)),
                ('error', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentBatch',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('year', models.PositiveIntegerField()),
                ('stcount', models.PositiveIntegerField(default=0)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('department', models.ForeignKey(to='events.Department')),
                ('organiser', models.ForeignKey(to='events.Organiser')),
            ],
        ),
        migrations.CreateModel(
            name='StudentMaster',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('moved', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(to='events.StudentBatch')),
                ('student', models.ForeignKey(to='events.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('test_code', models.CharField(max_length=100)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField()),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('appoved_by', models.ForeignKey(related_name='test_approved_by', to=settings.AUTH_USER_MODEL, null=True)),
                ('department', models.ManyToManyField(to='events.Department')),
                ('foss', models.ForeignKey(to='creation.FossCategory')),
                ('invigilator', models.ForeignKey(related_name='test_invigilator', to='events.Invigilator', null=True)),
                ('organiser', models.ForeignKey(related_name='test_organiser', to='events.Organiser')),
            ],
            options={
                'verbose_name': 'Test Categorie',
            },
        ),
        migrations.CreateModel(
            name='TestAttendance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mdluser_firstname', models.CharField(max_length=100)),
                ('mdluser_lastname', models.CharField(max_length=100)),
                ('mdluser_id', models.PositiveIntegerField()),
                ('mdlcourse_id', models.PositiveIntegerField(default=0)),
                ('mdlquiz_id', models.PositiveIntegerField(default=0)),
                ('mdlattempt_id', models.PositiveIntegerField(default=0)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('test', models.ForeignKey(to='events.Test')),
            ],
            options={
                'verbose_name': 'Test Attendance',
            },
        ),
        migrations.CreateModel(
            name='TestCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('status', models.BooleanField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Testimonials',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_name', models.CharField(max_length=200)),
                ('actual_content', models.TextField()),
                ('minified_content', models.TextField()),
                ('short_description', models.TextField()),
                ('source_title', models.CharField(max_length=200, null=True)),
                ('source_link', models.URLField(null=True)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('approved_by', models.ForeignKey(related_name='testimonial_approved_by', to=settings.AUTH_USER_MODEL, null=True)),
                ('user', models.ForeignKey(related_name='testimonial_created_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('role', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('test', models.ForeignKey(to='events.Test')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('training_type', models.PositiveIntegerField(default=0)),
                ('training_code', models.CharField(max_length=100, null=True)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField()),
                ('skype', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('trusted', models.BooleanField(default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('appoved_by', models.ForeignKey(related_name='training_approved_by', to=settings.AUTH_USER_MODEL, null=True)),
                ('course', models.ForeignKey(to='events.Course')),
                ('department', models.ManyToManyField(to='events.Department')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingAttend',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(default=None, to='creation.Language')),
                ('student', models.ForeignKey(to='events.Student')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingAttendance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mdluser_id', models.PositiveIntegerField(null=True, blank=True)),
                ('firstname', models.CharField(max_length=100, null=True)),
                ('lastname', models.CharField(max_length=100, null=True)),
                ('gender', models.CharField(max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('training', models.ForeignKey(to='events.Training')),
            ],
            options={
                'verbose_name': 'Training Attendance',
            },
        ),
        migrations.CreateModel(
            name='TrainingCertificate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=255, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('updated', models.DateTimeField()),
                ('student', models.ForeignKey(to='events.Student')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingExtraFields',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('paper_name', models.CharField(max_length=200)),
                ('approximate_hour', models.PositiveIntegerField(default=0)),
                ('online_test', models.PositiveIntegerField(default=0)),
                ('is_tutorial_useful', models.BooleanField(default=0)),
                ('future_training', models.BooleanField(default=0)),
                ('recommend_to_others', models.BooleanField(default=0)),
                ('no_of_lab_session', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingFeedback',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mdluser_id', models.PositiveIntegerField()),
                ('rate_workshop', models.PositiveSmallIntegerField()),
                ('content', models.PositiveSmallIntegerField()),
                ('sequence', models.PositiveSmallIntegerField()),
                ('clarity', models.PositiveSmallIntegerField()),
                ('interesting', models.PositiveSmallIntegerField()),
                ('appropriate_example', models.PositiveSmallIntegerField()),
                ('instruction_sheet', models.PositiveSmallIntegerField()),
                ('assignment', models.PositiveSmallIntegerField()),
                ('pace_of_tutorial', models.PositiveSmallIntegerField()),
                ('workshop_learnt', models.TextField()),
                ('weakness_workshop', models.BooleanField()),
                ('weakness_narration', models.BooleanField()),
                ('weakness_understand', models.BooleanField()),
                ('other_weakness', models.TextField()),
                ('tutorial_language', models.PositiveSmallIntegerField()),
                ('apply_information', models.PositiveSmallIntegerField()),
                ('if_apply_information_yes', models.TextField()),
                ('setup_learning', models.PositiveSmallIntegerField()),
                ('computers_lab', models.PositiveSmallIntegerField()),
                ('audio_quality', models.PositiveSmallIntegerField()),
                ('video_quality', models.PositiveSmallIntegerField()),
                ('workshop_orgainsation', models.PositiveSmallIntegerField()),
                ('faciliate_learning', models.PositiveSmallIntegerField()),
                ('motivate_learners', models.PositiveSmallIntegerField()),
                ('time_management', models.PositiveSmallIntegerField()),
                ('knowledge_about_software', models.PositiveSmallIntegerField()),
                ('provide_clear_explanation', models.PositiveSmallIntegerField()),
                ('answered_questions', models.PositiveSmallIntegerField()),
                ('interested_helping', models.PositiveSmallIntegerField()),
                ('executed_workshop', models.PositiveSmallIntegerField()),
                ('workshop_improved', models.TextField()),
                ('recommend_workshop', models.PositiveSmallIntegerField()),
                ('reason_why', models.TextField()),
                ('other_comments', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('training', models.ForeignKey(to='events.Training')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingLanguageFeedback',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mdluser_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField()),
                ('medium_of_instruction', models.PositiveIntegerField()),
                ('gender', models.BooleanField()),
                ('tutorial_was_useful', models.PositiveIntegerField()),
                ('learning_experience', models.PositiveIntegerField()),
                ('satisfied_with_learning_experience', models.PositiveIntegerField()),
                ('concept_explain_clearity', models.PositiveIntegerField()),
                ('overall_learning_experience', models.PositiveIntegerField()),
                ('user_interface', models.PositiveIntegerField()),
                ('understanding_difficult_concept', models.PositiveIntegerField()),
                ('curious_and_motivated', models.PositiveIntegerField()),
                ('similar_tutorial_with_other_content', models.PositiveIntegerField()),
                ('foss_tutorial_was_mentally_demanding', models.PositiveIntegerField()),
                ('side_by_side_method_is_understood', models.PositiveIntegerField(default=0)),
                ('compfortable_learning_in_language', models.PositiveIntegerField()),
                ('confidence_level_in_language', models.PositiveIntegerField()),
                ('preferred_language', models.PositiveIntegerField()),
                ('preferred_language_reason', models.TextField()),
                ('prefer_translation_in_mother_tongue', models.PositiveIntegerField()),
                ('prefer_translation_in_mother_tongue_reason', models.TextField()),
                ('side_by_side_method_meant', models.PositiveIntegerField()),
                ('side_by_side_method_is_beneficial', models.PositiveIntegerField()),
                ('side_by_side_method_is_beneficial_reason', models.TextField()),
                ('limitations_of_side_by_side_method', models.TextField()),
                ('content_information_flow', models.PositiveIntegerField()),
                ('content_appropriate_examples', models.PositiveIntegerField()),
                ('content_ease_of_understanding', models.PositiveIntegerField()),
                ('content_clarity_of_instruction_sheet', models.PositiveIntegerField()),
                ('content_ease_of_performing_assignment', models.PositiveIntegerField()),
                ('content_best_features', models.TextField()),
                ('content_areas_of_improvement', models.TextField()),
                ('video_audio_video_synchronization', models.PositiveIntegerField()),
                ('video_attractive_color_features', models.PositiveIntegerField()),
                ('video_text_readable', models.PositiveIntegerField()),
                ('video_best_features', models.TextField()),
                ('video_areas_of_improvement', models.TextField()),
                ('audio_pleasant_speech_and_accent', models.PositiveIntegerField()),
                ('audio_soothing_and_friendly_tone', models.PositiveIntegerField()),
                ('audio_understandable_and_clear_speech', models.PositiveIntegerField()),
                ('audio_best_features', models.TextField()),
                ('audio_areas_of_improvement', models.TextField()),
                ('side_by_side_method_is_effective', models.PositiveIntegerField(default=0)),
                ('side_by_side_method_is', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('language_prefered', models.ForeignKey(to='creation.Language', null=True)),
                ('training', models.ForeignKey(to='events.Training')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingLiveFeedback',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('rate_workshop', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('branch', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('content', models.PositiveSmallIntegerField()),
                ('sequence', models.PositiveSmallIntegerField()),
                ('clarity', models.PositiveSmallIntegerField()),
                ('interesting', models.PositiveSmallIntegerField()),
                ('appropriate_example', models.PositiveSmallIntegerField()),
                ('instruction_sheet', models.PositiveSmallIntegerField()),
                ('assignment', models.PositiveSmallIntegerField()),
                ('pace_of_tutorial', models.PositiveSmallIntegerField()),
                ('workshop_learnt', models.TextField()),
                ('weakness_workshop', models.BooleanField()),
                ('weakness_narration', models.BooleanField()),
                ('weakness_understand', models.BooleanField()),
                ('other_weakness', models.TextField()),
                ('tutorial_language', models.PositiveSmallIntegerField()),
                ('apply_information', models.PositiveSmallIntegerField()),
                ('if_apply_information_yes', models.TextField()),
                ('setup_learning', models.PositiveSmallIntegerField()),
                ('computers_lab', models.PositiveSmallIntegerField()),
                ('audio_quality', models.PositiveSmallIntegerField()),
                ('video_quality', models.PositiveSmallIntegerField()),
                ('workshop_orgainsation', models.PositiveSmallIntegerField()),
                ('faciliate_learning', models.PositiveSmallIntegerField()),
                ('motivate_learners', models.PositiveSmallIntegerField()),
                ('time_management', models.PositiveSmallIntegerField()),
                ('knowledge_about_software', models.PositiveSmallIntegerField()),
                ('provide_clear_explanation', models.PositiveSmallIntegerField()),
                ('answered_questions', models.PositiveSmallIntegerField()),
                ('interested_helping', models.PositiveSmallIntegerField()),
                ('executed_workshop', models.PositiveSmallIntegerField()),
                ('workshop_improved', models.TextField()),
                ('recommend_workshop', models.PositiveSmallIntegerField()),
                ('reason_why', models.TextField()),
                ('other_comments', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('training', models.ForeignKey(to='events.Training')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('role', models.PositiveSmallIntegerField()),
                ('status', models.PositiveSmallIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('training', models.ForeignKey(to='events.Training')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingPlanner',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('year', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(to='events.AcademicCenter')),
                ('organiser', models.ForeignKey(to='events.Organiser')),
                ('semester', models.ForeignKey(to='events.Semester')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingRequest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sem_start_date', models.DateField()),
                ('participants', models.PositiveIntegerField(default=0)),
                ('status', models.BooleanField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(to='events.StudentBatch', null=True)),
                ('course', models.ForeignKey(to='events.CourseMap')),
                ('department', models.ForeignKey(to='events.Department')),
                ('training_planner', models.ForeignKey(to='events.TrainingPlanner')),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('state', models.ForeignKey(to='events.State')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='trainingcertificate',
            name='training',
            field=models.ForeignKey(to='events.TrainingRequest'),
        ),
        migrations.AddField(
            model_name='trainingattend',
            name='training',
            field=models.ForeignKey(to='events.TrainingRequest'),
        ),
        migrations.AddField(
            model_name='training',
            name='extra_fields',
            field=models.OneToOneField(null=True, to='events.TrainingExtraFields'),
        ),
        migrations.AddField(
            model_name='training',
            name='foss',
            field=models.ForeignKey(to='creation.FossCategory'),
        ),
        migrations.AddField(
            model_name='training',
            name='language',
            field=models.ForeignKey(to='creation.Language'),
        ),
        migrations.AddField(
            model_name='training',
            name='organiser',
            field=models.ForeignKey(to='events.Organiser'),
        ),
        migrations.AddField(
            model_name='test',
            name='test_category',
            field=models.ForeignKey(related_name='test_category', to='events.TestCategory'),
        ),
        migrations.AddField(
            model_name='test',
            name='training',
            field=models.ForeignKey(to='events.Training', null=True),
        ),
        migrations.AddField(
            model_name='resourceperson',
            name='state',
            field=models.ForeignKey(to='events.State'),
        ),
        migrations.AddField(
            model_name='resourceperson',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='permission',
            name='permissiontype',
            field=models.ForeignKey(to='events.PermissionType'),
        ),
        migrations.AddField(
            model_name='permission',
            name='state',
            field=models.ForeignKey(related_name='permission_state', to='events.State'),
        ),
        migrations.AddField(
            model_name='permission',
            name='university',
            field=models.ForeignKey(related_name='permission_iniversity', to='events.University', null=True),
        ),
        migrations.AddField(
            model_name='permission',
            name='user',
            field=models.ForeignKey(related_name='permission_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='institutetype',
            unique_together=set([('name',)]),
        ),
        migrations.AddField(
            model_name='district',
            name='state',
            field=models.ForeignKey(to='events.State'),
        ),
        migrations.AddField(
            model_name='coursemap',
            name='course',
            field=models.ForeignKey(blank=True, to='events.LabCourse', null=True),
        ),
        migrations.AddField(
            model_name='coursemap',
            name='foss',
            field=models.ForeignKey(to='creation.FossCategory'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together=set([('name',)]),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(to='events.State'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='city',
            field=models.ForeignKey(to='events.City'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='district',
            field=models.ForeignKey(to='events.District'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='institute_category',
            field=models.ForeignKey(to='events.InstituteCategory'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='institution_type',
            field=models.ForeignKey(to='events.InstituteType'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='location',
            field=models.ForeignKey(to='events.Location', null=True),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='state',
            field=models.ForeignKey(to='events.State'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='university',
            field=models.ForeignKey(to='events.University'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='university',
            unique_together=set([('name', 'state')]),
        ),
        migrations.AlterUniqueTogether(
            name='trainingplanner',
            unique_together=set([('year', 'academic', 'organiser', 'semester')]),
        ),
        migrations.AlterUniqueTogether(
            name='traininglivefeedback',
            unique_together=set([('training', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='traininglanguagefeedback',
            unique_together=set([('training', 'mdluser_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='trainingfeedback',
            unique_together=set([('training', 'mdluser_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='trainingattend',
            unique_together=set([('training', 'student')]),
        ),
        migrations.AlterUniqueTogether(
            name='training',
            unique_together=set([('organiser', 'academic', 'foss', 'tdate', 'ttime')]),
        ),
        migrations.AlterUniqueTogether(
            name='testattendance',
            unique_together=set([('test', 'mdluser_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='test',
            unique_together=set([('organiser', 'academic', 'foss', 'tdate', 'ttime')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentmaster',
            unique_together=set([('batch', 'student')]),
        ),
        migrations.AlterUniqueTogether(
            name='studentbatch',
            unique_together=set([('academic', 'year', 'department')]),
        ),
        migrations.AlterUniqueTogether(
            name='state',
            unique_together=set([('code', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='singletrainingattendance',
            unique_together=set([('training', 'firstname', 'lastname', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='singletraining',
            unique_together=set([('organiser', 'academic', 'course', 'tdate', 'ttime')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceperson',
            unique_together=set([('user', 'state')]),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together=set([('name', 'district', 'pincode')]),
        ),
        migrations.AlterUniqueTogether(
            name='district',
            unique_together=set([('state', 'code', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='coursemap',
            unique_together=set([('course', 'foss', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together=set([('name', 'state')]),
        ),
    ]
